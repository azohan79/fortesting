#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
from datetime import datetime
import openai
from junitparser import JUnitXml

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API-–∫–ª—é—á–∞ ---
openai.api_key = os.getenv("OPENAI_API_KEY")

# --- –ü–∞—Ä—Å–∏–Ω–≥ Pytest XML ---
def parse_pytest(xml_path):
    xml = JUnitXml.fromfile(xml_path)
    total    = sum(suite.tests    for suite in xml)
    failures = sum(suite.failures for suite in xml)
    errors   = sum(suite.errors   for suite in xml)
    skipped  = sum(suite.skipped  for suite in xml)
    passed   = total - failures - errors - skipped
    return {
        "total": total,
        "passed": passed,
        "failures": failures,
        "errors": errors,
        "skipped": skipped
    }

# --- –ó–∞–≥—Ä—É–∑–∫–∞ SonarCloud JSON ---
def load_sonar(sonar_path):
    return json.load(open(sonar_path, encoding="utf-8"))

# --- –ó–∞–≥—Ä—É–∑–∫–∞ ZAP JSON ---
def load_zap(zap_path):
    return json.load(open(zap_path, encoding="utf-8"))

# --- –°–±–æ—Ä–∫–∞ prompt ---
def build_prompt(pytest, sonar, zap):
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    repo = os.getenv("GITHUB_REPOSITORY")
    repo_url = f"https://github.com/{repo}"
    return f"""
–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º CI/CD –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –£ —Ç–µ–±—è –µ—Å—Ç—å —Ç—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:

1. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã unit-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Pytest –≤ –≤–∏–¥–µ XML.
2. –û—Ç—á–µ—Ç SonarCloud –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞.
3. –û—Ç—á–µ—Ç OWASP ZAP –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫:
–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º CI/CD-–ø–∞–π–ø–ª–∞–π–Ω–∞ <a href="{repo_url}">{repo}</a>

üìå –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {now}
2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Pytest: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ ‚Äî {pytest["total"]}, –ø—Ä–æ–π–¥–µ–Ω–æ ‚Äî {pytest["passed"]}, –ø—Ä–æ–≤–∞–ª–µ–Ω–æ ‚Äî {pytest["failures"]}, –æ—à–∏–±–æ–∫ ‚Äî {pytest["errors"]}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî {pytest["skipped"]}.
3. –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–¥–∞ –ø–æ –¥–∞–Ω–Ω—ã–º SonarCloud:
   - –ü–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ MAJOR –∏ CRITICAL –æ—à–∏–±–∫–∏.
   - –î–ª—è –∫–∞–∂–¥–æ–π: –ø—Ä–∞–≤–∏–ª–æ, —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–æ–∫–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—è—Å–Ω–µ–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å).
   - –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π SonarCloud –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.
4. OWASP ZAP-–∞–ª–µ—Ä—Ç—ã:
   - –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ High –∏ Medium —Ä–∏—Å–∫–∏.
   - –î–ª—è –∫–∞–∂–¥–æ–≥–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–∏—Å–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤, URL, –ø–∞—Ä–∞–º–µ—Ç—Ä, –º–µ—Ç–æ–¥, –ø—Ä–∏–º–µ—Ä –∞—Ç–∞–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è.
   - –û–±–µ—Ä–Ω–∏ –∫–∞–∂–¥—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ —Ç–µ–≥ <details><summary>–ù–∞–∑–≤–∞–Ω–∏–µ</summary><ul>‚Ä¶</ul></details>
5. –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:
   - –ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏ –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º.
   - –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
   - –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤—É.

üìå –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <ul>, <li>, <code>, <div class="example">, <details>, <summary>.

üìå –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π.
"""

def main():
    # –ü—É—Ç–∏ –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º
    pytest_xml = "pytest_results.xml"
    sonar_json = "sonar-report.json"
    zap_json   = "zap_report.json"

    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    pytest_summary = parse_pytest(pytest_xml)
    sonar_data     = load_sonar(sonar_json)
    zap_data       = load_zap(zap_json)

    # –§–æ—Ä–º–∏—Ä—É–µ–º prompt
    prompt = build_prompt(pytest_summary, sonar_data, zap_data)

    # –í—ã–∑—ã–≤–∞–µ–º API
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
    )

    # –ü–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    html = response.choices[0].message.content
    with open("gpt_report.html", "w", encoding="utf-8") as f:
        f.write(html)

if __name__ == "__main__":
    main()
