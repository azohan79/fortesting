#!/usr/bin/env python3
import os
import json
import datetime
import xml.etree.ElementTree as ET
from openai import OpenAI

client = OpenAI()  # uses OPENAI_API_KEY env var

def parse_pytest(xml_path):
    tree = ET.parse(xml_path)
    root = tree.getroot()
    total   = int(root.attrib.get("tests", 0))
    failures= int(root.attrib.get("failures", 0))
    errors  = int(root.attrib.get("errors", 0))
    skipped = int(root.attrib.get("skipped", 0))
    passed  = total - failures - errors - skipped
    return {
        "total": total,
        "passed": passed,
        "failures": failures,
        "errors": errors,
        "skipped": skipped
    }

def load_sonar(sonar_path):
    with open(sonar_path, encoding="utf-8") as f:
        data = json.load(f)
    # filter only MAJOR and CRITICAL
    return [
        issue for issue in data.get("issues", [])
        if issue["severity"] in ("MAJOR", "CRITICAL")
    ]

def load_zap(zap_path):
    with open(zap_path, encoding="utf-8") as f:
        data = json.load(f)
    # filter only High and Medium
    return [
        alert for alert in data.get("alerts", [])
        if alert.get("risk", "").lower() in ("high", "medium")
    ]

def build_prompt(pytest_summary, sonar_issues, zap_alerts):
    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
    parts = []

    # 1. Header & pytest summary
    parts.append(f"""
–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º CI/CD –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

üìå –û—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º CI/CD-–ø–∞–π–ø–ª–∞–π–Ω–∞ "fortesting" (https://github.com/azohan79/fortesting)

1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {now}

2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Pytest:
- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {pytest_summary["total"]}
- –ü—Ä–æ–π–¥–µ–Ω–æ: {pytest_summary["passed"]}
- –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {pytest_summary["failures"]}
- –û—à–∏–±–æ–∫: {pytest_summary["errors"]}
- –ü—Ä–æ–ø—É—â–µ–Ω–æ: {pytest_summary["skipped"]}

3. –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–¥–∞ –ø–æ –¥–∞–Ω–Ω—ã–º SonarCloud (MAJOR –∏ CRITICAL):
""")

    # 2. Sonar issues
    for i in sonar_issues:
        parts.append(
            f"- –ü—Ä–∞–≤–∏–ª–æ: `<code>{i['rule']}</code>` | –£—Ä–æ–≤–µ–Ω—å: {i['severity']} | "
            f"–°—Ç—Ä–æ–∫–∞: {i['textRange']['startLine']}  \n"
            f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {i['message']}  \n"
            f"  –¢–µ–≥–∏: {', '.join(i.get('tags', [])) or '‚Äì'}  \n"
            f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É {i['rule']} –Ω–∞ sonarcloud.io\n\n"
        )

    # 3. ZAP alerts
    parts.append("4. OWASP ZAP-–∞–ª–µ—Ä—Ç—ã (High –∏ Medium):\n")
    for a in zap_alerts:
        parts.append(
            f"<details><summary>{a.get('alert')}</summary>\n"
            "<ul>\n"
            f"  <li>–†–∏—Å–∫: {a.get('risk')}</li>\n"
            f"  <li>URL: {a.get('url', '‚Äì')}</li>\n"
            f"  <li>–ü–∞—Ä–∞–º–µ—Ç—Ä: {a.get('param', '‚Äì')}</li>\n"
            f"  <li>–ú–µ—Ç–æ–¥: {a.get('method', '‚Äì')}</li>\n"
            f"  <li>–ü—Ä–∏–º–µ—Ä –∞—Ç–∞–∫–∏ (evidence): <code>{a.get('evidence', '‚Äì')}</code></li>\n"
            f"  <li>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {a.get('solution', '‚Äì')}</li>\n"
            "</ul>\n"
            "</details>\n\n"
        )

    # 4. Conclusion
    parts.append("""
5. –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:
- –ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º.
- –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
- –î–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å.
""")
    return "".join(parts)

def main():
    pytest_xml  = "pytest_results.xml"
    sonar_json  = "sonar-report.json"
    zap_json    = "zap_report.json"

    pytest_summary = parse_pytest(pytest_xml)
    sonar_issues   = load_sonar(sonar_json)
    zap_alerts     = load_zap(zap_json)

    prompt = build_prompt(pytest_summary, sonar_issues, zap_alerts)

    resp = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
    )

    html = resp.choices[0].message.content
    with open("gpt_report.html", "w", encoding="utf-8") as f:
        f.write(html)

    print("‚úÖ gpt_report.html generated.")

if __name__ == "__main__":
    main()
